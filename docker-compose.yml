version: '3.7'

volumes:
  model_data: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  front-tier:
  back-tier:

services:
  create_insurance_model:
    build: 
      context: .
      dockerfile: Dockerfile.model
    volumes:
      - model_data:/model
    environment:
      DATASET_PATH: ../data/reference.csv
      CREATE_MODEL_AT_PATH: ../model/classifier

  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    ports:
      - "8080:5000"
    depends_on:
      create_insurance_model:
        condition: service_completed_successfully
    volumes:
      - model_data:/model
    environment:
      MODEL_PATH: ../model/classifier

  notebook:
    build:
      context: .
      dockerfile: Dockerfile.notebook
    ports:
      - "8888:8888"
      - "8889:8889"
    volumes:
      - ./:/data
      - model_data:/model
    environment:
      MODEL_PATH: ../model/classifier
    networks:
      - front-tier

  evidently_service:
    build:
      context: .
      dockerfile: Dockerfile.metric
    depends_on:
      - grafana
    volumes:
      - ./datasets:/app/datasets
    ports:
      - "8085:8085"
    networks:
      - back-tier
      - front-tier

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - back-tier
    restart: always

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./dashboards:/opt/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - back-tier
      - front-tier
    restart: always

  httpserver:
    image: trinitronx/python-simplehttpserver
    volumes:
    - ./app/:/var/www:ro
    ports:
    - "8000:8080"
    networks:
    - front-tier
    depends_on:
      - app